<% layout('layouts/boilerplate') %>
 <div id="map" style="width: 100%; height: 500px" class="mb-3"></div>
        <% for (let campground of campgrounds) { %>
            <div class="card mb-3">
                <div class="row">
                    <div class="col-md-4">
                        <% if(campground.images.length) { %>
                            <img crossorigin="anonymous" src="<%= campground.images[0].url%>" class="img-fluid" alt="">
                        <% } else {%>
                            <img crossorigin="anonymous" src="https://res.cloudinary.com/dmjmz4ipe/image/upload/v1689191278/YelpCamp/pq7yoqy2ipxmrmyhdxjk.jpg %>" class="img-fluid" alt="">
                        <% } %>
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title"> <%= campground.title %> </h5>
                            <p class="card-text"> <%= campground.description %></p>
                            <p class="card-text">
                                <small class="text-muted"> <%= campground.location %></small>
                            </p>
                            <a href="campgrounds/<%= campground._id %>"class="btn btn-primary"> View <%= campground.title %></a>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    <a href="campgrounds/new">Create Campground</a>

<script crossorigin="anonymous">
    const campgrounds = {features: <%- JSON.stringify(campgrounds) %>};
	mapboxgl.accessToken = 'pk.eyJ1IjoibmVkYXNraWJpbGRpcyIsImEiOiJjbGswMThtY3gwZ3lsM3BxbDhnY2h0OXBsIn0.icf3PX5Osl8ogwitR_m3aA';
    const map = new mapboxgl.Map({
        container: 'map',
    // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
        style: 'mapbox://styles/mapbox/dark-v11',
        center: [-103.5917, 40.6699],
        zoom: 3
    });

    map.addControl(new mapboxgl.NavigationControl())
map.on('load', () => {
// Add a new source from our GeoJSON data and
// set the 'cluster' option to true. GL-JS will
// add the point_count property to your source data.
    map.addSource('campgrounds', {
        type: 'geojson',
        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
        data: campgrounds,
        cluster: true,
        clusterMaxZoom: 14, // Max zoom to cluster points on
        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });
 
    map.addLayer({
        id: 'clusters',
        type: 'circle',
        source: 'campgrounds',
        filter: ['has', 'point_count'],
        paint: {
        // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
        // with three steps to implement three types of circles:
        //   * Blue, 20px circles when point count is less than 100
        //   * Yellow, 30px circles when point count is between 100 and 750
        //   * Pink, 40px circles when point count is greater than or equal to 750
        'circle-color': [
            'step',
            ['get', 'point_count'],
            '#00BCD4',
            10,
            '#2196f3',
            30,
            '#3f51b5'
        ],
        'circle-radius': [
            'step',
            ['get', 'point_count'],
            15,
            10,
            20,
            30,
            25
        ]
        }
    });
 
    map.addLayer({
        id: 'cluster-count',
        type: 'symbol',
        source: 'campgrounds',
        filter: ['has', 'point_count'],
        layout: {
            'text-field': ['get', 'point_count_abbreviated'],
            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
            'text-size': 12
        }
    });
 
    map.addLayer({
        id: 'unclustered-point',
        type: 'circle',
        source: 'campgrounds',
        filter: ['!', ['has', 'point_count']],
        paint: {
            'circle-color': '#11b4da',
            'circle-radius': 4,
            'circle-stroke-width': 1,
            'circle-stroke-color': '#fff'
        }
    });
 
// inspect a cluster on click
    map.on('click', 'clusters', (e) => {
        const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
        });
        const clusterId = features[0].properties.cluster_id;    
        map.getSource('campgrounds').getClusterExpansionZoom(clusterId, (err, zoom) => {
            if (err) return;
 
            map.easeTo({
                center: features[0].geometry.coordinates,
                zoom: zoom
            });
        });
    });
 
// When a click event occurs on a feature in
// the unclustered-point layer, open a popup at
// the location of the feature, with
// description HTML from its properties.
    map.on('click', 'unclustered-point', (e) => {
        const text = e.features[0].properties.popUpMarkup
        const coordinates = e.features[0].geometry.coordinates.slice();
        
 
        // Ensure that if the map is zoomed out such that
        // multiple copies of the feature are visible, the
        // popup appears over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
 
        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(
                text
            )
            .addTo(map);
    });
 
    map.on('mouseenter', 'clusters', () => {
        map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', () => {
        map.getCanvas().style.cursor = '';
    });
});
</script>